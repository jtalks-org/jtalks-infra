#!/bin/bash
#Backup of mysql databases and site content with daily execution and rotation in one month
#
#E.Antropov (aidjek@gmail.com)

PATH=/usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
BACKUP_DIR=<%= @backup_dir %>
SOURCE_DIR=/home
EXCLUDED_LIST=$BACKUP_DIR/list_of_files_excluded_to_rsync
LIST_OF_FOLDERS_TO_EXCLUDE="<%= @exclude_dirs %>"
LOG_FILE=/tmp/backup.log
LOCK=/tmp/backup.lock
REMOTE_FTP=<%= @ftp %>
EMAIL="aidjek@jtalks.org jmasyan@gmail.com stanislav.bashkirtsev@gmail.com"
SERVER_NAME=<%= @server_name %>
MYSQL_ROOT_PASSWORD=<%= @mysql_root_password %>

# checking for lock file

if [ -f $LOCK ];
then
        echo "backup process for $(date) already running, check $LOCK" > $LOG_FILE
        SUBJECT="$SERVER_NAME Backup Script ERROR on $HOSTNAME for $(date)"
# Email text/message send an email using /bin/mail
        /bin/mail -s "$SUBJECT" $EMAIL < $LOG_FILE
        exit 1;
fi

success_backup() {
        if [ $? -eq 1 ] ; then
                echo "Failed on $1" >> $LOG_FILE
                SUBJECT="$SERVER_NAME Backup Script ERROR on $HOSTNAME for $(date)"
                mail -s "$SUBJECT" $EMAIL < $LOG_FILE
                rm -rf $LOCK
                exit 1
        fi
        echo "Done with $1" >> $LOG_FILE
}


#creating lock file
echo $$ > $LOCK

# Logging
echo "Backup for $SERVER_NAME started at $(date)" > $LOG_FILE

# Define date and directory path

set $(/bin/date +'%G %b %d %a %W');
d=$3;
D=$4;

DEST_DIR_D="$BACKUP_DIR/daily/$4";
DEST_DIR_W="$BACKUP_DIR/weekly/$3";
DEST_DIR_M="$BACKUP_DIR/monthly/$2";

#Daily

if [ ! -d "$DEST_DIR_D/mysql" ]; then
        /bin/mkdir -p $DEST_DIR_D/mysql
fi

if [ ! -d "$dest_dir_d/home" ]; then
        /bin/mkdir -p $DEST_DIR_D/home
fi

#backuping databases

echo "Starting mysqldump at $(date)" >> $LOG_FILE

DB_DIRS=$(mysqlshow -u root --password="$MYSQL_ROOT_PASSWORD"|grep -v "\-\-\|Databases"|awk '{print $2}' | egrep -v "information_schema")
for db in $DB_DIRS;   do
        echo "dumping ${db}..." >> $LOG_FILE;
        (time mysqldump -u root --password="$MYSQL_ROOT_PASSWORD" --opt  ${db} | bzip2 > ${DEST_DIR_D}/mysql/${db}.sql.bz2) 2>&1>> $LOG_FILE
        success_backup "mysqldump ${db}"
done

#backup of home
echo "Starting /home directory rsync at $(date)" >> $LOG_FILE
LIST_OF_FOLDERS=$(ls -1 /home | egrep -v "lost\+found")

for i in $LIST_OF_FOLDERS; do
	cd /home
	find $i -type f \( -name "*.log*" -o -name "*.out" \) ;
done > $EXCLUDED_LIST

for directory in $LIST_OF_FOLDERS_TO_EXCLUDE ; do
	echo $directory | sed 's/\/home\///' >> $EXCLUDED_LIST
done

rm -rf ${BACKUP_DIR}/daily/home

for i in $LIST_OF_FOLDERS; do
        (time /usr/bin/rsync -avz  --exclude-from=$EXCLUDED_LIST --progress ${SOURCE_DIR}/$i ${BACKUP_DIR}/daily/home/) 2>> $LOG_FILE
        success_backup "rsync $i home dir"
done
(time /usr/bin/rsync -avz --progress /etc ${BACKUP_DIR}/daily/home/) 2>> $LOG_FILE
        success_backup "rsync etc dir"
(time /usr/bin/rsync -avz --progress /var/www/html ${BACKUP_DIR}/daily/home/) 2>> $LOG_FILE
        success_backup "rsync /var/www/html dir"

cd  ${DEST_DIR_D}
(time tar -cjvf home.tar.bz2 ../home/) 2>> $LOG_FILE
        success_backup "bzipped home dir"

# copying backup on remote FTP server
while [ $(echo df -h | sftp $REMOTE_FTP | tail -n 1 | awk '{print $NF}' | cut -d\% -f1) -ge 80 ] ; do
	echo "On REMOTE FTP there are not more disk space, rotating ...."  >> $LOG_FILE
	for i in $(echo ls -lt | sftp $REMOTE_FTP | awk '{print $NF}' | tail -n 3) ; do
		echo rm $i/* | sftp $REMOTE_FTP
		success_backup "removing on remote ftp old archive $i"
		echo rmdir $i | sftp $REMOTE_FTP
	done
done

echo mkdir $(/bin/date '+%d_%m_%Y') | sftp $REMOTE_FTP
cd ${DEST_DIR_D}/mysql
(time scp * $REMOTE_FTP:$(/bin/date '+%d_%m_%Y'))  2>&1>> $LOG_FILE
success_backup "backuping on remote ftp mysql folder"
cd ${DEST_DIR_D}
(time scp home.tar.bz2 $REMOTE_FTP:$(/bin/date '+%d_%m_%Y'))  2>&1>> $LOG_FILE
success_backup "backuping on remote ftp home archive"

#Weekly
if [ $D = "Sun" ]; then
echo "Today is Sunday - rotating ..." >> $LOG_FILE;
        if [ ! -d "$DEST_DIR_W" ]; then
                 mkdir -p $DEST_DIR_W
        fi
        rsync -avz --progress $DEST_DIR_D/ $DEST_DIR_W/ 2>> $LOG_FILE
		success_backup "weekly backup"
#removing old home dir once in a week
		rm -rf ${BACKUP_DIR}/daily/home/*
fi

#Monthly
if [ $d -gt 28 ];then
echo "Today is end of month - rotating ..." >> $LOG_FILE;
       if [ ! -d "$DEST_DIR_M" ]; then
                mkdir -p $DEST_DIR_M
       fi;
       rsync -avz --progress $DEST_DIR_D/ $DEST_DIR_M/ 2>> $LOG_FILE
	   success_backup "monthly backup"
fi

#removing old backups
echo "Remove old backups" >> $LOG_FILE

/usr/bin/find $BACKUP_DIR/weekly/ -type f -mtime +22 -exec rm -rf {} \; >/dev/null 2>&1
/usr/bin/find $BACKUP_DIR/weekly/ -type d -mtime +22 -exec rm -rf {} \; >/dev/null 2>&1
/usr/bin/find $BACKUP_DIR/monthly/ -type f -mtime +62 -exec rm -rf {} \; >/dev/null 2>&1
/usr/bin/find $BACKUP_DIR/monthly/ -type d -mtime +62 -exec rm -rf {} \; >/dev/null 2>&1

echo "Backup for $SERVER_NAME complete at $(date), for more info check $LOG_FILE" >> $LOG_FILE

# send email with results

SUBJECT="$SERVER_NAME Backup Script DONE on $HOSTNAME for $(date)"
/bin/mail -s "$SUBJECT" $EMAIL < $LOG_FILE

# removing lock
rm -rf $LOCK